
## Plot data from multiple species based on text files of a common name in the same directory
speciesPlot <- function(dir=".", pattern="*testes-cap.replicated.cpg_density.export", main="CAPseq testes", xlab="CpGDensity", filename="test.pdf", plotcol=2, xlimit=c(0,5), ylimit=c(0.5))
{
    filelist <- dir(path=dir, pattern=pattern)
    leg = NULL
    pdf(file=filename, height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12, colormodel="cmyk")
    plot(0, xlim=xlimit, ylim=ylimit, xlab=xlab, main=main, type="n")
    for (i in 1:length(filelist)) {
        x <- read.table(file=paste(dir,filelist[i],sep="/"), na.string="None")
        data <- x[,plotcol]
        d <- density(data, na.rm=TRUE)
        lines(d, col=i, lwd=3)
        med <- median(data,na.rm=T)
        abline(v=med, col=i)
        leg[i] <- substr(filelist[i],1,2)
    }
    legend("topright", legend=leg, col=seq(1:length(filelist)), lty=rep(1,length(filelist)), bty="n", lwd=rep(3,length(filelist)))
    dev.off()
}
#speciesPlot(dir=".", pattern="*testes-cap.replicated.cpg.export", main="CAPseq testes", xlab="CpG", filename="capseq_testes_cpg.pdf", plotcol=2, xlimit=c(0,2), ylimit=c(0,3.5))

combinedTSSPlot <- function(capseqfile="", nocapseqfile="", outfile="combined_tss_plot.pdf", ylimit=c(0,5), scale=1)
{
    capseq <- read.table(file=capseqfile, header=TRUE)
    # Adjust x axis
    capseq[,1] <- capseq[,1]-3000
    nocapseq <- read.table(file=nocapseqfile, header=TRUE)
    nocapseq[,1] <- nocapseq[,1]-3000
    leg <- c("NMI TSS","NMI TTS","non-NMI TSS")
    pdf(file=outfile, height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12)
    plot(capseq[,1],capseq[,2]*scale,main="",xlab="Distance (bp)", ylab="Normalised Read depth", ylim=ylimit, lwd="3", col=1, type="l" )
    lines(capseq[,1], capseq[,3]*scale, lwd="3", col=2)
    lines(nocapseq[,1], nocapseq[,2]*scale, lwd="3", col=3)
    legend("topright", legend=leg, col=c(1,2,3), lty=c(1,1,1), lwd=c(3,3,3), bty="n")
    dev.off()}
#combinedTSSPlot(capseqfile="mm_es-cap.replicated.transcript.tss-profile.capseq.none.tsv.gz", nocapseqfile="mm_es-cap.replicated.transcript.tss-profile.nocapseq.none.tsv.gz", outfile="mm_es_cap_combined_tss_plot.none.pdf", ylimit=c(0,25))

sharesVsUniqueLengthPlot <- function(shared="", unique="", outfile="shared_vs_unique_interval_length.pdf", ylimit=c(0,1))
{
    shared <- read.table(file=shared, header=FALSE)
    unique <- read.table(file=unique, header=FALSE)
    d1 <- density(shared[,1], na.rm=TRUE)
    d2 <- density(unique[,1], na.rm=TRUE)
    ymax <- max(d1[[2]],d2[[2]])*1.1
    ylimit <- c(0,ymax)
    leg <- c("Shared", "unique")
    pdf(file=outfile, height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12, colormodel="cmyk")
    plot(d1, xlim=c(0,8000), ylim=ylimit, xlab="Length (bp)", main="", col="1", lwd=3)
    lines(d2, col=2, lwd=3)
    legend("topright", legend=leg, col=c(1,2), lty=rep(1,2), bty="n", lwd=rep(3,2))
    dev.off()
}
#sharesVsUniqueLengthPlot(shared="", unique="", outfile="shared_vs_unique_interval_length.pdf", ylimit=c(0,25))

liverTestesChromatinPlot <- function(infiles=c("",""), outfile="liver_testes_unique_chromatin.pdf")
{
    data <- list()
    length(data) <- length(infiles)
    x <- seq(1,3000)
    all <- NULL
    leg <- NULL
    for (i in 1:length(infiles)) {
        chromatin <- read.table(file=infiles[i], header=TRUE, stringsAsFactors=F)
        data[[i]] <- c(chromatin[,2],chromatin[,3],chromatin[,4])
        all <- c(all,chromatin[,2],chromatin[,3],chromatin[,4])
        pos1 <- gregexpr(".replicated.",infiles[i],fixed=T)[[1]][1]+12
        pos2 <- gregexpr(".profile.",infiles[i],fixed=T)[[1]][1]-1
        leg[i] <- substr(infiles[i], pos1, pos2)
    }
    
    ymax <- max(all)*1.1
    ylimit <- c(0,ymax)
    pdf(file=outfile, height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12)
    plot(x,data[[1]], col=2, lwd=3, ylim=ylimit, xlab="Unique Intervals", ylab="H3K4Me3", main="", type="l")
    for (i in 2:length(data)) {
        lines(x,data[[i]], col=i+1, lwd=3)
    }
    abline(v=c(1000,2000), lty=2,col=4)
    legend("topright", legend=leg, col=c(2,3), lty=c(1,1), lwd=c(3,3), bty="n")
    dev.off()
}

overlappedGenesProfilePlot <- function(overlapped="", control="", outfile="overlapped_genes_chromatin.pdf", ylabel="")
{
    overlapped <- read.table(file=overlapped, header=TRUE, stringsAsFactors=F)
    control <- read.table(file=control, header=TRUE, stringsAsFactors=F)
    pdf(file=outfile, height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12)
    plot(control[,1],control[,2], col=2, lwd=3, xlim=c(0,3000), xlab="Gene Profile", ylab=ylabel, main="", type="l")
    lines(control[,1]+1000,control[,3],col=2, lwd=3)
    lines(control[,1]+2000,control[,4],col=2, lwd=3)
    lines(overlapped[,1],overlapped[,2], col=3, lwd=3)
    lines(overlapped[,1]+1000,overlapped[,3],col=3, lwd=3)
    lines(overlapped[,1]+2000,overlapped[,4],col=3, lwd=3)
    abline(v=c(1000,2000), lty=2,col=4)
    leg <- c("<10% Overlapped genes",">90% Overlapped genes")
    legend("topright", legend=leg, col=c(2,3), lty=c(1,1), lwd=c(3,3), bty="n")
    dev.off()
}

