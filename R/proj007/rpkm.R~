calc_rpkm <- function(infile,outfile) {
    x <- read.table(file=infile, stringsAsFactors=FALSE, header=TRUE)
    data <- x[,7:dim(x)[2]]
    lengths <- x[,6]
    read_counts <- lengths*data
    total_reads <- apply(read_counts,2,sum)
    denom <- matrix(rep(lengths,dim(data)[2]),ncol=dim(data)[2])
    colnames(denom) <- colnames(data)
    denom <- denom*total_reads
    rpkm <- (read_counts*1e9)/denom
    rpkm_out <- cbind(x[,1],rpkm)
    colnames(rpkm_out)[1] <- "gene_id"
    write.table(rpkm_out, file=outfile, sep = "\t", row.names=FALSE, quote=FALSE)
}

read_counts <- function(infile,outfile) {
    x <- read.table(file=infile, stringsAsFactors=FALSE, header=TRUE)
    data <- x[,7:dim(x)[2]]
    lengths <- x[,6]
    read_counts <- round(lengths*data)
    counts_out <- cbind(x[,1],read_counts)
    colnames(counts_out)[1] <- "gene_id"
    write.table(counts_out, file=outfile, sep = "\t", row.names=FALSE, quote=FALSE)
}

plot_rpkm <- function(liver="", testes="", shared="", rpkm="", outfile="rpkm_plot.pdf") {
    l <- read.table(file=liver, stringsAsFactors=FALSE, header=TRUE)
    t <- read.table(file=testes, stringsAsFactors=FALSE, header=TRUE)
    s <- read.table(file=shared, stringsAsFactors=FALSE, header=TRUE)
    # Get liver and testes data from expression file and average over replicates
    rpkm <- read.table(file=rpkm, stringsAsFactors=FALSE, header=TRUE)
    liver_cols <- grep("Liver_Male",colnames(rpkm))
    liver_exp <- as.matrix(rpkm[,liver_cols])
    if (dim(liver_exp)[2] > 1) { liver_exp <- apply(liver_exp,1,mean) }
    #liver_exp <- data.frame(rpkm[,1],liver_exp)
    testes_cols <- grep("Testis_Male",colnames(rpkm))
    testes_exp <- as.matrix(rpkm[,testes_cols])
    if (dim(testes_exp)[2] > 1) { testes_exp <- apply(testes_exp,1,mean) }
    #testes_exp <- data.frame(rpkm[,1],testes_exp)
    lt_exp <- data.frame(rpkm[,1],testes_exp,liver_exp)
    # get liver and testes expression for the 3 different gene lists
    liver_uniq <- lt_exp[match(l[,1],lt_exp[,1]),2:3]
    testes_uniq <- lt_exp[match(t[,1],lt_exp[,1]),2:3]
    shared <- lt_exp[match(s[,1],lt_exp[,1]),2:3]
    # create plot
    pdf(file=outfile, height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12)
    plot(shared,type="p",col=1,xlab="Testes RPKM", ylab="Liver RPKM", main="", log="xy")
    points(liver_uniq,col=2)
    points(testes_uniq,col=3)
    abline(0,1,col=4,lty=2)
    abline(2,1,col=4,lty=2)
    abline(-2,1,col=4,lty=2)
    leg=c("Shared","Liver-specific","Testes-specific")
    legend("topleft", legend=leg, col=c(1,2,3), pch=c(1,1,1), bty="n")
    dev.off()
}

boxplot_rpkm <- function(liver="", testes="", shared="", rpkm="", outfile="rpkm_plot.pdf") {
    l <- read.table(file=liver, stringsAsFactors=FALSE, header=TRUE)
    t <- read.table(file=testes, stringsAsFactors=FALSE, header=TRUE)
    s <- read.table(file=shared, stringsAsFactors=FALSE, header=TRUE)
    # Get liver and testes data from expression file and average over replicates
    rpkm <- read.table(file=rpkm, stringsAsFactors=FALSE, header=TRUE)
    liver_cols <- grep("Liver_Male",colnames(rpkm))
    liver_exp <- as.matrix(rpkm[,liver_cols])
    if (dim(liver_exp)[2] > 1) { liver_exp <- apply(liver_exp,1,mean) }
    #liver_exp <- data.frame(rpkm[,1],liver_exp)
    testes_cols <- grep("Testis_Male",colnames(rpkm))
    testes_exp <- as.matrix(rpkm[,testes_cols])
    if (dim(testes_exp)[2] > 1) { testes_exp <- apply(testes_exp,1,mean) }
    #testes_exp <- data.frame(rpkm[,1],testes_exp)
    lt_exp <- data.frame(rpkm[,1],testes_exp,liver_exp)
    # get liver and testes expression for the 3 different gene lists
    liver_uniq <- lt_exp[match(l[,1],lt_exp[,1]),2:3]
    testes_uniq <- lt_exp[match(t[,1],lt_exp[,1]),2:3]
    shared <- lt_exp[match(s[,1],lt_exp[,1]),2:3]
    # calculate difference between loiver and testes
    liver_diff <- log2(liver_uniq[,1]-liver_uniq[,2])
    testes_diff <- log2(testes_uniq[,1]-testes_uniq[,2])
    shared_diff <- log2(shared[,1]-shared[,2])
    all <- list(shared=shared_diff, liver=liver_diff, testes=testes_diff)
    # create plot
    pdf(file=outfile, height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12)
    boxplot(all, ylab="Testes RPKM/Liver RPKM", main="")
    dev.off()
}

density_rpkm <- function(liver="", testes="", shared="", rpkm="", outfile="rpkm_density.pdf") {
    l <- read.table(file=liver, stringsAsFactors=FALSE, header=TRUE)
    t <- read.table(file=testes, stringsAsFactors=FALSE, header=TRUE)
    s <- read.table(file=shared, stringsAsFactors=FALSE, header=TRUE)
    # Get liver and testes data from expression file and average over replicates
    rpkm <- read.table(file=rpkm, stringsAsFactors=FALSE, header=TRUE)
    liver_cols <- grep("Liver_Male",colnames(rpkm))
    liver_exp <- as.matrix(rpkm[,liver_cols])
    if (dim(liver_exp)[2] > 1) { liver_exp <- apply(liver_exp,1,mean) }
    #liver_exp <- data.frame(rpkm[,1],liver_exp)
    testes_cols <- grep("Testis_Male",colnames(rpkm))
    testes_exp <- as.matrix(rpkm[,testes_cols])
    if (dim(testes_exp)[2] > 1) { testes_exp <- apply(testes_exp,1,mean) }
    #testes_exp <- data.frame(rpkm[,1],testes_exp)
    lt_exp <- data.frame(rpkm[,1],testes_exp,liver_exp)
    # get liver and testes expression for the 3 different gene lists
    liver_uniq <- lt_exp[match(l[,1],lt_exp[,1]),2:3]
    testes_uniq <- lt_exp[match(t[,1],lt_exp[,1]),2:3]
    shared <- lt_exp[match(s[,1],lt_exp[,1]),2:3]
    # calculate difference between loiver and testes
    liver_diff <- log2(liver_uniq[,1]-liver_uniq[,2])
    testes_diff <- log2(testes_uniq[,1]-testes_uniq[,2])
    shared_diff <- log2(shared[,1]-shared[,2])
    liver_density <- density(liver_diff,na.rm=TRUE)
    testes_density <- density(testes_diff,na.rm=TRUE)
    shared_density <- density(shared_diff,na.rm=TRUE)
    liver_ks <- ks.test(liver_diff, "pnorm")
    testes_ks <- ks.test(testes_diff, "pnorm")
    shared_ks <- ks.test(shared_diff, "pnorm")
    liver_p <- as.character(round(liver_ks$p.value,4))
    testes_p <- as.character(round(testes_ks$p.value ,4))
    shared_p <- as.character(round(shared_ks$p.value,4))
    # create plot
    pdf(file=outfile, height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12)
    plot(shared_density, xlab="Testes RPKM/Liver RPKM", main="", type="l", col=1, lwd=3)
    lines(liver_density, col=2, lwd=3)
    lines(testes_density, col=3, lwd=3)
    leg=c("Shared","Liver-specific","Testes-specific")
    legend("topright", legend=leg, col=c(1,2,3), lwd=c(3,3,3), bty="n")
    leg2=c(shared_p,liver_p,testes_p)
    legend("topleft", legend=leg2, col=c(1,2,3), lwd=c(3,3,3), bty="n", title="KS-test P-value")
    dev.off()
}

foldchange_rpkm <- function(liver="", testes="", shared="", rpkm="", outfile="rpkm_foldchange.pdf") {
    l <- read.table(file=liver, stringsAsFactors=FALSE, header=TRUE)
    t <- read.table(file=testes, stringsAsFactors=FALSE, header=TRUE)
    s <- read.table(file=shared, stringsAsFactors=FALSE, header=TRUE)
    # Get liver and testes data from expression file and average over replicates
    rpkm <- read.table(file=rpkm, stringsAsFactors=FALSE, header=TRUE)
    liver_cols <- grep("Liver_Male",colnames(rpkm))
    liver_exp <- as.matrix(rpkm[,liver_cols])
    if (dim(liver_exp)[2] > 1) { liver_exp <- apply(liver_exp,1,mean) }
    testes_cols <- grep("Testis_Male",colnames(rpkm))
    testes_exp <- as.matrix(rpkm[,testes_cols])
    if (dim(testes_exp)[2] > 1) { testes_exp <- apply(testes_exp,1,mean) }
    testes_exp[testes_exp<0] <- 1
    liver_exp[liver_exp<0] <- 1
    diff <- log2(liver_exp)-log2(testes_exp)
    lt_exp <- data.frame(rpkm[,1],testes_exp,liver_exp,diff)
    # Overexpressed in Liver
    liver_up <- lt_exp[lt_exp[,4] >= 1,]
    # Overexpressed in Testes
    testes_up <- lt_exp[lt_exp[,4] <= -1,]
    # Unchanged
    unchanged <- lt_exp[(lt_exp[,4] > -1 && lt_exp[,4] < 1),]
    # get liver and testes expression for the 3 different gene lists
    liver_uniq_up <- liver_up[match(l[,1],liver_up[,1]),4]
    nonliver_up <- liver_up[!match(l[,1],liver_up[,1]),4]
    testes_uniq_up <- testes_up[match(t[,1],testes_up[,1]),4]
    nontestes_up <- testes_up[!match(t[,1],testes_up[,1]),4]
    liver_uniq_unchanged <- unchanged[match(l[,1],unchanged[,1]),4]
    testes_uniq_unchanged <- unchanged[match(t[,1],unchanged[,1]),4]
    #
    liver_test <- as.matrix(c(dim(liver_uniq_up)[1], dim(liver_uniq_unchanged)[1],dim(nonliver_up)[1],dim(unchanged)[1]), nrow=2, ncol=2)
    # create plot
    pdf(file=outfile, height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12)
    plot(shared,type="p",col=1,xlab="Testes RPKM", ylab="Liver RPKM", main="", log="xy")
    points(liver_uniq,col=2)
    points(testes_uniq,col=3)
    abline(0,1,col=4,lty=2)
    abline(2,1,col=4,lty=2)
    abline(-2,1,col=4,lty=2)
    leg=c("Shared","Liver-specific","Testes-specific")
    legend("topleft", legend=leg, col=c(1,2,3), pch=c(1,1,1), bty="n")
    dev.off()
}

tags_filename <- "mm_ens57_counts.tsv"
design_filename <- "mm_design_table.tsv"
outfile <- "mm_deseq"
log2foldchange=2
liver="/ifs/projects/proj007/capseq7/mm9/ensembl66/liver_vs_testes/mm_liver-cap.replicated.liver.testes.unique.genelist"
testes="/ifs/projects/proj007/capseq7/mm9/ensembl66/liver_vs_testes/mm_testes-cap.replicated.liver.testes.unique.genelist"
shared="/ifs/projects/proj007/capseq7/mm9/ensembl66/liver_vs_testes/liver.testes.shared.genelist"

tags_filename <- "hs_ens57_counts.tsv"
design_filename <- "hs_design_table.tsv"
outfile <- "hs_deseq"
log2foldchange=2
liver="/ifs/projects/proj007/capseq7/hg19/ensembl66/liver_vs_testes/hs_liver-cap.replicated.liver.testes.unique.genelist"
testes="/ifs/projects/proj007/capseq7/hg19/ensembl66/liver_vs_testes/hs_testes-cap.replicated.liver.testes.unique.genelist"
shared="/ifs/projects/proj007/capseq7/hg19/ensembl66/liver_vs_testes/liver.testes.shared.genelist"

tags_filename <- "oa_ens57_counts.tsv"
design_filename <- "oa_design_table.tsv"
outfile <- "oa_deseq"
log2foldchange=2
liver="/ifs/projects/proj007/capseq7/ornAna1/rnaseq/liver_vs_testes/oa_male_liver-cap.replicated.liver.testes.unique.genelist"
testes="/ifs/projects/proj007/capseq7/ornAna1/rnaseq/liver_vs_testes/oa_testes-cap.replicated.liver.testes.unique.genelist"
shared="/ifs/projects/proj007/capseq7/ornAna1/rnaseq/liver_vs_testes/liver.testes.shared.genelist"

tags_filename <- "gg_ens57_counts.tsv"
design_filename <- "gg_design_table.tsv"
outfile <- "gg_deseq"
log2foldchange=2
liver="/ifs/projects/proj007/capseq7/galGal3/rnaseq/liver_vs_testes/gg_liver-cap.replicated.liver.testes.unique.genelist"
testes="/ifs/projects/proj007/capseq7/galGal3/rnaseq/liver_vs_testes/gg_testes-cap.replicated.liver.testes.unique.genelist"
shared="/ifs/projects/proj007/capseq7/galGal3/rnaseq/liver_vs_testes/liver.testes.shared.genelist"

#diff_exp <- function(tags_filename='', design_filename='', liver="", testes="", shared="", outfile="", log2foldchange=2) {

    # Load data
    counts_table = read.delim( tags_filename, header = TRUE, row.names = 1, stringsAsFactors = TRUE, comment.char = '#' )
    pheno = read.delim( design_filename, header = TRUE, stringsAsFactors = TRUE, comment.char = '#')
    # Ensure pheno rows match count columns
    pheno2 = pheno[match(colnames(counts_table),pheno[,1]),,drop=FALSE]
    # Subset data & set conditions
    includedSamples <- !(is.na(pheno2$include) | pheno2$include == '0')
    countsTable <- counts_table[ ,includedSamples]
    groups <- factor(pheno2$group[ includedSamples ])
    conds <- pheno2$group[ includedSamples ]
    reps <- min(table(groups))    
    
    # Plots
    library('ggplot2')
    library('reshape')
    d = melt( log10(countsTable + 1), variable_name = 'sample' )
    gp = ggplot(d)
    pp = gp + geom_density(aes(x=value,group=sample,color=sample,fill=sample),alpha=I(1/3))
    ggsave( paste(outfile,".densities.png",sep="") )
    dev.off()
    gp = ggplot(d)
    pp = gp + geom_boxplot(aes(x=sample,y=value,color=sample,fill=sample),size=0.3,alpha=I(1/3)) + opts( axis_text_x = theme_text( angle=90, hjust=1, size=8 ) )
    ggsave( paste(outfile,".boxplots.png",sep="") )
    dev.off()
    
    # Run DESeq
    suppressMessages(library('DESeq'))
    max_counts = apply(countsTable,1,max)
    countsTable = countsTable[max_counts>0,]
    cds <- newCountDataSet( countsTable, groups)
    cds <- estimateSizeFactors( cds )
    cds <- estimateDispersions( cds )
    write.table( counts(cds), file=gzfile(paste(outfile,"scounts.tsv.gz",sep="")), sep='\t')
    
    # Size factors
    png( paste(outfile,".sizefactors.png",sep="") )
    par(mar=c(8,4,4,2))
    barplot( sizeFactors( cds ), main="size factors", las=2)
    dev.off()
    s <- sizeFactors( cds )
    write.table(s, file=paste(outfile,".sizefactors.tsv"), sep="\t")

    # Heatmap
    vsd <- getVarianceStabilizedData( cds )
    dists <- dist( t( vsd ) )
    png( paste(outfile, ".heatmap.png", sep="") )
    heatmap( as.matrix( dists ), symm=TRUE )
    dev.off()

    # Pairs plot
    png( paste(outfile,".pairsplot.png",sep=""), width=960, height=960 )
    panel.pearson <- function(x, y, digits=2, prefix="", cex.cor, ...) {
        usr <- par("usr"); on.exit(par(usr))
        par(usr = c(0, 1, 0, 1))
        r <- abs(cor(x, y))
        txt <- format(c(r, 0.123456789), digits=digits)[1]
        txt <- paste(prefix, txt, sep="")
        if(missing(cex.cor)) cex <- 0.6/strwidth(txt)
        x = 0.5;
        y = 0.5;
        if (par("xlog")) { x = 10^x }; 
        if (par("ylog")) { y = 10^y }; 
        text(x, y, txt, cex = cex);
    }
    pairs( countsTable, lower.panel = panel.pearson, pch=".", log="xy" )
    dev.off()
    
    # Run Differential expression test
    res <- nbinomTest( cds, "liver", "testes" )
    
    # Plot significance
    png( file=paste(outfile,".significance.png",sep=""))
    plot( res$baseMean, res$log2FoldChange, log="x", pch=20, cex=.1, col = ifelse( res$padj < 0.05, "red", "black" ) )
    dev.off()
    
    # DE plots
    library('grid')
    gp = ggplot(res)
    significant <- res$padj < 0.05
    a = gp + geom_density(aes(x=log10(baseMeanA+1),group=factor(significant), color=factor(significant),fill=factor(significant)),alpha=I(1/3))
    b = gp + geom_density(aes(x=log10(baseMeanB+1),group=factor(significant), color=factor(significant),fill=factor(significant)),alpha=I(1/3))
    png( paste(outfile, ".dx.densities.png", sep="") )
    grid.newpage()
    pushViewport(viewport( layout = 'grid.layout'(2,1)))
    print( a, vp = viewport( layout.pos.row = 1, layout.pos.col = 1 ) )
    print( b, vp = viewport( layout.pos.row = 2, layout.pos.col = 1 ) )
    dev.off()

    grid.newpage()
    pushViewport(viewport( layout = 'grid.layout'(2,1)))
    gp = ggplot(res)
    a = gp + geom_boxplot(aes(x=factor(significant), y=log10(baseMeanA+1), color=factor(significant), fill=factor(significant)), size=0.3, alpha=I(1/3))
    b = gp + geom_boxplot(aes(x=factor(significant), y=log10(baseMeanB+1), color=factor(significant), fill=factor(significant)), size=0.3, alpha=I(1/3)) + opts( axis_text_x = theme_text( angle=90, hjust=1, size=8 ) )
    png( paste(outfile, ".dx.boxplots.png", sep="") )
    print( a, vp = viewport( layout.pos.row = 1, layout.pos.col = 1 ) )
    print( b, vp = viewport( layout.pos.row = 2, layout.pos.col = 1 ) )
    dev.off()
    
    # Get diff exp genes (>2 fold change, adjusted p-value < 0.05)
    # Overexpressed in Liver
    liver_up <- res[(res$padj < 0.05 & res$log2FoldChange < -0.585),]
    # Overexpressed in Testes
    testes_up <- res[(res$padj < 0.05 & res$log2FoldChange > 0.585),]
    # Unchanged
    unchanged <- res[res$padj > 0.05,]
    
    # Load liver and testes specific NMI gene lists
    l <- read.table(file=liver, stringsAsFactors=FALSE, header=TRUE)
    t <- read.table(file=testes, stringsAsFactors=FALSE, header=TRUE)
    s <- read.table(file=shared, stringsAsFactors=FALSE, header=TRUE)
    
    # Make contingency table
    liver_nmi_up <- liver_up[!is.na(match(liver_up[,1],l[,1])),]
    shared_nmi_liver_up <- liver_up[!is.na(match(liver_up[,1],s[,1])),]
    testes_nmi_up <- testes_up[!is.na(match(testes_up[,1],t[,1])),]
    shared_nmi_testes_up <- testes_up[!is.na(match(testes_up[,1],s[,1])),]
    liver_nmi_unchanged <- unchanged[!is.na(match(unchanged[,1],l[,1])),]
    testes_nmi_unchanged <- unchanged[!is.na(match(unchanged[,1],t[,1])),]
    shared_nmi_unchanged <- unchanged[!is.na(match(unchanged[,1],s[,1])),]
    # Fisher test
    liver_test <- matrix(c(dim(liver_nmi_up)[1], dim(liver_nmi_unchanged)[1], dim(shared_nmi_liver_up)[1], dim(shared_nmi_unchanged)[1]), nrow=2, ncol=2)
    rownames(liver_test) <- c("Overexpressed in liver vs testes","Unchanged in liver vs Testes")
    colnames(liver_test) <- c("liver-specific NMI","Shared NMI")
    liver_nmi_result <- fisher.test(liver_test)
    testes_test <- matrix(c(dim(testes_nmi_up)[1], dim(testes_nmi_unchanged)[1], dim(shared_nmi_testes_up)[1], dim(shared_nmi_unchanged)[1]), nrow=2, ncol=2)
    rownames(testes_test) <- c("Overexpressed in liver vs testes","Unchanged in liver vs Testes")
    colnames(testes_test) <- c("testes-specific NMI","Shared NMI")
    testes_nmi_result <- fisher.test(testes_test)
    # Output results
    write.table(liver_test, file=paste(outfile,".liver.contingency-table.tsv",sep=""), sep="\t")
    write.table(testes_test, file=paste(outfile,".testes.contingency-table.tsv",sep=""), sep="\t")
    fisher_result <- data.frame(liver_nmi_result[3]$estimate,liver_nmi_result[1]$p.value,liver_nmi_result[2]$conf.int[1],liver_nmi_result[2]$conf.int[2])
    fisher_result <- rbind(fisher_result,c(testes_nmi_result[3]$estimate,testes_nmi_result[1]$p.value,testes_nmi_result[2]$conf.int[1],testes_nmi_result[2]$conf.int[2]) )
    colnames(fisher_result) <- c("odds.ratio","p.value","conf.int.low","conf.int.high")
    rownames(fisher_result) <- c("liver","testes")
    write.table(fisher_result, file=paste(outfile,".fisher.test.tsv",sep=""), sep="\t")
    
    # Plot results
    pdf(file=paste(outfile,".scatter.pdf",sep=""), height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12)
    plot(shared_nmi_unchanged[,4],shared_nmi_unchanged[,3],type="p",col="grey",xlab="Testes Mean", ylab="Liver Mean", main="", log="xy")
    points(shared_nmi_liver_up[,4],shared_nmi_liver_up[,3],col="grey")
    points(shared_nmi_testes_up[,4],shared_nmi_testes_up[,3],col="grey")
    points(liver_nmi_up[,4],liver_nmi_up[,3],col="red")
    points(liver_nmi_unchanged[,4],liver_nmi_unchanged[,3],col="red")
    points(testes_nmi_up[,4],testes_nmi_up[,3],col="green")
    points(testes_nmi_unchanged[,4],testes_nmi_unchanged[,3],col="green")
    abline(0,1,col=4,lty=2)
    abline(2,1,col=4,lty=2)
    abline(-2,1,col=4,lty=2)
    leg=c("Shared","Liver-specific","Testes-specific")
    legend("topleft", legend=leg, col=c("grey",2,3), pch=c(1,1,1), bty="n")
    dev.off()   
    
    # MA plot
    pdf(file=paste(outfile,".maplot.pdf",sep=""), height=8, width=8, onefile=TRUE, family='Helvetica', paper='A4', pointsize=12)
    plot(log2(shared_nmi_unchanged[,2]),shared_nmi_unchanged[,6],type="p",col="grey",xlab="log2(Mean Expression)", ylab="log ratio", main="")
    points(log2(shared_nmi_liver_up[,2]),shared_nmi_liver_up[,6],col="grey")
    points(log2(shared_nmi_testes_up[,2]),shared_nmi_testes_up[,6],col="grey")
    points(log2(liver_nmi_up[,2]),liver_nmi_up[,6],col="red")
    points(log2(liver_nmi_unchanged[,2]),liver_nmi_unchanged[,6],col="red")
    points(log2(testes_nmi_up[,2]),testes_nmi_up[,6],col="green")
    points(log2(testes_nmi_unchanged[,2]),testes_nmi_unchanged[,6],col="green")
    abline(h=c(-1,1),col=4,lty=2)
    abline(h=c(-2,2),col=4,lty=2)
    leg=c("Shared","Liver-specific","Testes-specific")
    legend("topleft", legend=leg, col=c("grey",2,3), pch=c(1,1,1), bty="n")
    dev.off() 
}
 
